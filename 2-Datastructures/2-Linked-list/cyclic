class Node {
    constructor(data){
        this.data = data;
        this.next = null;
    }
}

class Linkedlist {
     constructor(){
       this.head = null
    }
    
    insertInEnd(data){
        const newNode = new Node(data);
        
        // If the head is empty
        if(!this.head){
            this.head = newNode;
            return;
        }
        
        // Traverse till the end of node
        let current = this.head;
        while(current.next){
            current = current.next;
        }
        
        // Point the last node next to new node
        current.next = newNode
    }
    
    insertInStart(data){
        const newNode = new Node(data);
        let currentHead = this.head;
        newNode.next = currentHead;
        this.head = newNode;
    }
    
    print(){
        let current = this.head
        while(current){
            console.log("[",current.data,"]");
            current = current.next;
        }
    }
}

n1 = new Node(1) 
n2 = new Node(2) 
n3 = new Node(3) 
n4 = new Node(4) 
n5 = new Node(5) 

n1.next = n2;
n2.next = n3
n3.next = n4
n4.next = n5
n5.next = null

node = n1;

fast = node
slow = node

while(fast && fast.next){
    slow = slow.next
    fast = fast.next.next
    
    if(fast == slow){
        console.log("Cyclic")
        return 
    }
}
console.log("Not cyclic")




// while(node){
//     console.log(node.data);
//     node = node.next
// }











